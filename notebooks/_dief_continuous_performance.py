import marimo

__generated_with = "0.13.15"
app = marimo.App(width="medium")


@app.cell
def _():
    import marimo as mo
    import json
    from texttable import Texttable
    import latextable
    from tabulate import tabulate
    import sys
    sys.path.append("./")
    from generateDataset import generateDatasetFromResults
    from metric import diefficiency
    import numpy as np
    from typing import List, Optional
    from pathlib import Path
    import diefpy
    return Path, diefpy, generateDatasetFromResults, json, mo, np, sys


@app.cell
def _():
    import matplotlib.pyplot as plt
    from matplotlib.ticker import FormatStrFormatter
    from matplotlib.lines import Line2D
    return (plt,)


@app.cell
def _(sys):
    sys.path.append("./notebooks/")
    from continuous_performance import create_resp_by_template, plot, stats, resp_no_raw, resp_no_raw_by_template
    return (
        create_resp_by_template,
        plot,
        resp_no_raw,
        resp_no_raw_by_template,
        stats,
    )


@app.cell
def _():
    from continuous_performance import is_zero, displayed_stat
    return displayed_stat, is_zero


@app.cell
def _(mo):
    mo.md(r"""# Function definition""")
    return


@app.cell
def _():
    queries = [
        "interactive-discover-1",
        "interactive-discover-2",
        "interactive-discover-3",
        "interactive-discover-4",
        "interactive-discover-5",
        "interactive-discover-6",
        "interactive-discover-7",
        "interactive-discover-8",
        "interactive-short-1",
        "interactive-short-2",
        "interactive-short-3",
        "interactive-short-4",
        "interactive-short-5",
        "interactive-short-6",
        "interactive-short-7"
    ]

    versions = [f"v{i}" for i in range(5)]
    version_dict = {v: i for i, v in enumerate(versions)}
    return queries, version_dict


@app.cell
def _(queries):
    def produce_initial_resp():
        resp = {}
        for query in queries:
            resp[query] = []
            for n_query in range(5):
                metrics = {
                    "dief@0.1s":None,
                    "dief@1s":None,
                    "dief@10s":None,
                }
                resp[query].append(metrics)
        return resp

    return (produce_initial_resp,)


@app.cell
def _(diefpy, np, stats, version_dict):
    def populate_diefficiency(resp, dataset):
        for q, value in dataset.arrivalTimes.items():
            for v, arrival_time_rep in value.items():

                if arrival_time_rep == None and dataset.executionTime[q][v] != None:
                    resp[q][version_dict[v]]["dief@0.1s"] = {"avg": 0, "min": 0, "max": 0, "std": 0, "raw": [0]}
                    resp[q][version_dict[v]]["dief@1s"] = {"avg": 0, "min": 0, "max": 0, "std": 0, "raw": [0]}
                    resp[q][version_dict[v]]["dief@10s"] = {"avg": 0, "min": 0, "max": 0, "std": 0, "raw": [0]}
                    continue

                elif arrival_time_rep == None:
                    resp[q][version_dict[v]]["dief@0.1s"] = None
                    resp[q][version_dict[v]]["dief@1s"] = None
                    resp[q][version_dict[v]]["dief@10s"] = None
                    continue


                diefficiencies_0_1s = []
                diefficiencies_1s = []
                diefficiencies_10s = []

                dtype  = [('test', 'U100'), ('approach', 'U100'), ('answer', 'i4'), ('time', 'f8')]

                for arrival_time in arrival_time_rep:

                    if len(arrival_time) == 0:
                        diefficiencies_0_1s.append(0)
                        diefficiencies_1s.append(0)
                        diefficiencies_10s.append(0)
                        continue

                    data = []
                    for i, t in enumerate(arrival_time):
                        current = (q, dataset.name, i+1, t)
                        data.append(current)

                    arr = np.array(data, dtype=dtype)


                    diefficiency_val_0_1s = diefpy.dieft(arr, q, 0.1*1_000)
                    diefficiency_val_1s = diefpy.dieft(arr, q, 1_000)
                    diefficiency_val_10s = diefpy.dieft(arr, q, 10*1_000)

                    diefficiencies_0_1s.append(diefficiency_val_0_1s[0][2])
                    diefficiencies_1s.append(diefficiency_val_1s[0][2])
                    diefficiencies_10s.append(diefficiency_val_10s[0][2])


                stat_0_1s = stats(diefficiencies_0_1s)
                stat_1s = stats(diefficiencies_1s)
                stat_10s = stats(diefficiencies_10s)

                resp[q][version_dict[v]]["dief@0.1s"] = stat_0_1s
                resp[q][version_dict[v]]["dief@1s"] = stat_1s
                resp[q][version_dict[v]]["dief@10s"] = stat_10s
        return
    return (populate_diefficiency,)


@app.cell
def _(diefpy, np):
    def plot_distribution(dataset):
        plts = []
        for q, value in dataset.arrivalTimes.items():
            for v, arrival_time_rep in value.items():

                if arrival_time_rep == None and dataset.executionTime[q][v] != None:
                    continue

                elif arrival_time_rep == None:
                    continue
                
                dtype  = [('test', 'U100'), ('approach', 'U100'), ('answer', 'i4'), ('time', 'f8')]
                for arrival_time in arrival_time_rep:

                    if len(arrival_time) == 0:
                        continue

                    data = []
                    for i, t in enumerate(arrival_time):
                        current = (q, dataset.name, i+1, t)
                        data.append(current)

                    arr = np.array(data, dtype=dtype)

                    plt = diefpy.plot_answer_trace(arr, q)
                    plt.show(warn=False)
                    plts.append(plt)
                    break

        return plts

    return (plot_distribution,)


@app.cell
def _(create_resp_by_template, populate_diefficiency, produce_initial_resp):
    def generate_continuous_performances(dataset):
        resp = produce_initial_resp()
        populate_diefficiency(resp, dataset)
        resp_by_template = create_resp_by_template(resp)

        return (resp, resp_by_template)
    return (generate_continuous_performances,)


@app.cell
def _(mo):
    mo.md(r"""# Dataset""")
    return


@app.cell
def _(Path):
    artefact_path = Path("artefact") / "continuous_performance"
    return (artefact_path,)


@app.cell
def _(generateDatasetFromResults):
    shapeIndexPathResult = "./results/standard/shape_index_result.json"
    shapeIndexPathSummary = "./results/standard/summary_shape_index_result.json"
    shapeIndexDataset = generateDatasetFromResults(shapeIndexPathResult, shapeIndexPathSummary, "shape index")

    ldpPathResult = "./results/standard/ldp_result.json"
    ldpPathSummary = "./results/standard/summary_ldp_result.json"
    ldpDataset = generateDatasetFromResults(ldpPathResult, ldpPathSummary, "LDP")

    typeIndexLdpPathResult = "./results/standard/type_index_ldp_result.json"
    typeIndexLdpPathSummary = "./results/standard/summary_type_index_ldp_result.json"
    typeIndexLdpDataset = generateDatasetFromResults(typeIndexLdpPathResult, typeIndexLdpPathSummary, "type index")
    return ldpDataset, shapeIndexDataset, typeIndexLdpDataset


@app.cell
def _(mo):
    mo.md(r"""# Calculation""")
    return


@app.cell
def _(
    generate_continuous_performances,
    ldpDataset,
    shapeIndexDataset,
    typeIndexLdpDataset,
):
    (resp_si, resp_by_template_si) = generate_continuous_performances(shapeIndexDataset)
    (resp_ldp, resp_by_template_ldp) = generate_continuous_performances(ldpDataset)
    (resp_ti, resp_by_template_ti) = generate_continuous_performances(typeIndexLdpDataset)
    return (
        resp_by_template_ldp,
        resp_by_template_si,
        resp_by_template_ti,
        resp_ldp,
        resp_si,
        resp_ti,
    )


@app.cell
def _():
    dist
    return (dist,)


@app.cell
def _():
    times = [0,8.496493038000015,16.99298607600003,25.489479114000044,33.98597215200006,42.48246519000007,50.97895822800008,59.47545126600009,67.9719443040001,76.46843734200012,84.96493038000013,93.46142341800014,101.95791645600015,110.45440949400016,118.95090253200017,127.44739557000018,135.9438886080002,144.44038164600022,152.93687468400023,161.43336772200024,169.92986076000025,178.42635379800026,186.92284683600028,195.4193398740003,203.9158329120003,212.4123259500003,220.90881898800032,229.40531202600033,237.90180506400034,246.39829810200035,254.89479114000036,263.3912841780004,271.8877772160004,280.38427025400046,288.8807632920005,297.37725633000053,305.8737493680006,314.3702424060006,322.86673544400065,331.3632284820007,339.85972152000073,348.3562145580008,356.8527075960008,365.34920063400085,373.8456936720009,382.34218671000093,390.83867974800097,399.335172786001,407.83166582400105,416.3281588620011,424.82465190000113,433.32114493800117,441.8176379760012,450.31413101400125,458.8106240520013,467.3071170900013,475.80361012800137,484.3001031660014,492.79659620400145,501.2930892420015,509.7895822800015,518.2860753180015,526.7825683560015,535.2790613940016,543.7755544320016,552.2720474700017,560.7685405080017,569.2650335460017,577.7615265840018,586.2580196220018,594.7545126600019,603.2510056980019,611.747498736002,620.243991774002,628.740484812002,637.2369778500021,645.7334708880021,654.2299639260021,662.7264569640022,671.2229500020022,679.7194430400023,688.2159360780023,696.7124291160023,705.2089221540024,713.7054151920024,722.2019082300025,730.6984012680025,739.1948943060025,747.6913873440026,756.1878803820026,764.6843734200027,773.1808664580027,781.6773594960027,790.1738525340028,798.6703455720028,807.1668386100029,815.6633316480029,824.1598246860029,832.656317724003,841.152810762003,849.649303800003,858.1457968380031,866.6422898760031,875.1387829140032,883.6352759520032,892.1317689900033,900.6282620280033,909.1247550660033,917.6212481040034,926.1177411420034,934.6142341800035,943.1107272180035,951.6072202560035,960.1037132940036,968.6002063320036,977.0966993700036,985.5931924080037,994.0896854460037,1002.5861784840038,1011.0826715220038,1019.5791645600038,1028.0756575980038,1036.5721506360037,1045.0686436740036,1053.5651367120036,1062.0616297500035,1070.5581227880034,1079.0546158260033,1087.5511088640033,1096.0476019020032,1104.544094940003,1113.040587978003,1121.537081016003,1130.0335740540029,1138.5300670920028,1147.0265601300027,1155.5230531680027,1164.0195462060026,1172.5160392440025,1181.0125322820024,1189.5090253200024,1198.0055183580023,1206.5020113960022,1214.9985044340021,1223.494997472002,1231.991490510002,1240.487983548002,1248.9844765860018,1257.4809696240018,1265.9774626620017,1274.4739557000016,1282.9704487380016,1291.4669417760015,1299.9634348140014,1308.4599278520013,1316.9564208900013,1325.4529139280012,1333.949406966001,1342.445900004001,1350.942393042001,1359.4388860800009,1367.9353791180008,1376.4318721560007,1384.9283651940007,1393.4248582320006,1401.9213512700005,1410.4178443080004,1418.9143373460004,1427.4108303840003,1435.9073234220002,1444.4038164600001,1452.900309498,1461.396802536,1469.893295574,1478.3897886119998,1486.8862816499998,1495.3827746879997,1503.8792677259996,1512.3757607639996,1520.8722538019995,1529.3687468399994,1537.8652398779993,1546.3617329159993,1554.8582259539992,1563.354718991999,1571.851212029999,1580.347705067999,1588.8441981059989,1597.3406911439988,1605.8371841819987,1614.3336772199987,1622.8301702579986,1631.3266632959985,1639.8231563339984,1648.3196493719984,1656.8161424099983,1665.3126354479982,1673.8091284859981,1682.305621523998,1690.802114561998,1699.298607599998,1707.7951006379978,1716.2915936759978,1724.7880867139977,1733.2845797519976,1741.7810727899976,1750.2775658279975,1758.7740588659974,1767.2705519039973,1775.7670449419973,1784.2635379799972,1792.760031017997,1801.256524055997,1809.753017093997,1818.2495101319969,1826.7460031699968,1835.2424962079967,1843.7389892459967,1852.2354822839966,1860.7319753219965,1869.2284683599964,1877.7249613979964,1886.2214544359963,1894.7179474739962,1903.2144405119961,1911.710933549996,1920.207426587996,1928.703919625996,1937.2004126639958,1945.6969057019958,1954.1933987399957,1962.6898917779956,1971.1863848159956,1979.6828778539955,1988.1793708919954,1996.6758639299953,2005.1723569679953,2013.6688500059952,2022.165343043995,2030.661836081995,2039.158329119995,2047.6548221579949,2056.151315195995,2064.647808233995,2073.144301271995,2081.6407943099953,2090.1372873479954,2098.6337803859956,2107.1302734239957,2115.626766461996,2124.123259499996,2132.619752537996,2141.1162455759963,2149.6127386139965,2158.1092316519967,2166.605724689997,2175.102217727997,2183.598710765997,2192.0952038039973,2200.5916968419974,2209.0881898799976,2217.5846829179977,2226.081175955998,2234.577668993998,2243.074162031998,2251.5706550699983,2260.0671481079985,2268.5636411459986,2277.060134183999,2285.556627221999,2294.053120259999,2302.5496132979993,2311.0461063359994,2319.5425993739996,2328.0390924119997,2336.53558545,2345.032078488,2353.528571526,2362.0250645640003,2370.5215576020005,2379.0180506400006,2387.514543678001,2396.011036716001,2404.507529754001,2413.0040227920013,2421.5005158300014,2429.9970088680016,2438.4935019060017,2446.989994944002,2455.486487982002,2463.982981020002,2472.4794740580023,2480.9759670960025,2489.4724601340026,2497.968953172003,2506.465446210003,2514.961939248003,2523.4584322860032,2531.9549253240034,2540.4514183620036,2548.9479114000037,2557.444404438004,2565.940897476004,2574.437390514004,2582.9338835520043,2591.4303765900045,2599.9268696280046,2608.423362666005,2616.919855704005,2625.416348742005,2633.9128417800052,2642.4093348180054,2650.9058278560055,2659.4023208940057,2667.898813932006,2676.395306970006,2684.891800008006,2693.3882930460063,2701.8847860840065,2710.3812791220066,2718.8777721600068,2727.374265198007,2735.870758236007,2744.3672512740072,2752.8637443120074,2761.3602373500075,2769.8567303880077,2778.353223426008,2786.849716464008,2795.346209502008,2803.8427025400083,2812.3391955780085,2820.8356886160086,2829.3321816540088,2837.828674692009,2846.325167730009,2854.821660768009,2863.3181538060094,2871.8146468440095,2880.3111398820097,2888.80763292001,2897.30412595801,2905.80061899601,2914.2971120340103,2922.7936050720105,2931.2900981100106,2939.7865911480108,2948.283084186011,2956.779577224011,2965.276070262011,2973.7725633000114,2982.2690563380115,2990.7655493760117,2999.262042414012,3007.758535452012,3016.255028490012,3024.7515215280123,3033.2480145660124,3041.7445076040126,3050.2410006420128,3058.737493680013,3067.233986718013,3075.730479756013,3084.2269727940134,3092.7234658320135,3101.2199588700137,3109.716451908014,3118.212944946014,3126.709437984014,3135.2059310220143,3143.7024240600144,3152.1989170980146,3160.6954101360147,3169.191903174015,3177.688396212015,3186.184889250015,3194.6813822880154,3203.1778753260155,3211.6743683640157,3220.170861402016,3228.667354440016,3237.163847478016,3245.6603405160163,3254.1568335540164,3262.6533265920166,3271.1498196300167,3279.646312668017,3288.142805706017,3296.639298744017,3305.1357917820173,3313.6322848200175,3322.1287778580177,3330.625270896018,3339.121763934018,3347.618256972018,3356.1147500100183,3364.6112430480184,3373.1077360860186,3381.6042291240187,3390.100722162019,3398.597215200019,3407.093708238019,3415.5902012760193,3424.0866943140195,3432.5831873520196,3441.07968039002,3449.57617342802,3458.07266646602,3466.5691595040203,3475.0656525420204,3483.5621455800206,3492.0586386180207,3500.555131656021,3509.051624694021,3517.548117732021,3526.0446107700213,3534.5411038080215,3543.0375968460216,3551.534089884022,3560.030582922022,3568.527075960022,3577.0235689980223,3585.5200620360224,3594.0165550740226,3602.5130481120227,3611.009541150023,3619.506034188023,3628.002527226023,3636.4990202640233,3644.9955133020235,3653.4920063400236,3661.988499378024,3670.484992416024,3678.981485454024,3687.4779784920242,3695.9744715300244,3704.4709645680246,3712.9674576060247,3721.463950644025,3729.960443682025,3738.456936720025,3746.9534297580253,3755.4499227960255,3763.9464158340256,3772.442908872026,3780.939401910026,3789.435894948026,3797.9323879860262,3806.4288810240264,3814.9253740620265,3823.4218671000267,3831.918360138027,3840.414853176027,3848.911346214027,3857.4078392520273,3865.9043322900275,3874.4008253280276,3882.897318366028,3891.393811404028,3899.890304442028,3908.3867974800282,3916.8832905180284,3925.3797835560285,3933.8762765940287,3942.372769632029,3950.869262670029,3959.365755708029,3967.8622487460293,3976.3587417840295,3984.8552348220296,3993.3517278600298,4001.84822089803,4010.34471393603,4018.8412069740302,4027.3377000120304,4035.8341930500305,4044.3306860880307,4052.827179126031,4061.323672164031,4069.820165202031,4078.3166582400313,4086.8131512780315,4095.3096443160316,4103.806137354031,4112.3026303920315,4120.799123430032,4129.295616468032,4137.792109506032,4146.288602544032,4154.785095582032,4163.281588620032,4171.7780816580325,4180.274574696033,4188.771067734033,4197.267560772033,4205.764053810033,4214.260546848033,4222.757039886033,4231.253532924034,4239.750025962034,4248.2465190000075]
    return (times,)


@app.cell
def _(dist, plt, times):
    plt.plot(times, dist)  # 'o' adds circular markers at data points

    # Add labels and title
    plt.xlabel("times")
    plt.ylabel("n answer")
    plt.title("boo")

    # Show the plot
    plt.grid(True)
    plt.show()
    return


@app.cell
def _(shapeIndexDataset):
    shapeIndexDataset.arrivalTimes["interactive-discover-1"]["v0"][0]
    return


@app.cell
def _(plot_distribution, shapeIndexDataset):
    plts = plot_distribution(shapeIndexDataset)
    return (plts,)


@app.cell
def _(plts):
    plts[0]
    return


@app.cell
def _(plts):
    plts[10]
    return


@app.cell
def _(plts):
    plts[20]
    return


@app.cell
def _(
    artefact_path,
    json,
    resp_by_template_ldp,
    resp_by_template_si,
    resp_by_template_ti,
    resp_ldp,
    resp_no_raw,
    resp_no_raw_by_template,
    resp_si,
    resp_ti,
):
    with open(artefact_path / "dief_raw_shape_index.json", 'w') as f:
        json.dump(resp_si, f)

    with open(artefact_path / "dief_raw_ldp.json", 'w') as f:
        json.dump(resp_ldp, f)

    with open(artefact_path / "dief_raw_type_index.json", 'w') as f:
        json.dump(resp_ti, f)


    with open(artefact_path / "dief_summary_shape_index.json", 'w') as f:
        json.dump(resp_no_raw(resp_si), f)

    with open(artefact_path / "dief_summary_ldp.json", 'w') as f:
        json.dump(resp_no_raw(resp_ldp), f)

    with open(artefact_path / "dief_summary_type_index.json", 'w') as f:
        json.dump(resp_no_raw(resp_ti), f)


    with open(artefact_path / "dief_shape_index_by_template.json", 'w') as f:
        json.dump(resp_by_template_si, f)

    with open(artefact_path / "dief_ldp_by_template.json", 'w') as f:
        json.dump(resp_by_template_ldp, f)

    with open(artefact_path / "dief_type_index_by_template.json", 'w') as f:
        json.dump(resp_by_template_ti, f)


    with open(artefact_path / "dief_summary_shape_index_by_template.json", 'w') as f:
        json.dump(resp_no_raw_by_template(resp_by_template_si), f)

    with open(artefact_path / "dief_summary_ldp_by_template.json", 'w') as f:
        json.dump(resp_no_raw_by_template(resp_by_template_ldp), f)

    with open(artefact_path / "dief_summary_type_indexby_template.json", 'w') as f:
        json.dump(resp_no_raw_by_template(resp_by_template_ti), f)

    return


@app.cell
def _():
    reported_templates = [
        "interactive-discover-1",
        "interactive-discover-2",
        "interactive-discover-3",
        "interactive-discover-4",
        "interactive-discover-5",
        "interactive-discover-6",
        "interactive-discover-7",
        "interactive-short-1",
        "interactive-short-4",
        "interactive-short-5",
        "interactive-short-7",
    ]

    return (reported_templates,)


@app.cell
def _(mo):
    mo.md(r"""## Visualization""")
    return


@app.cell
def _(mo):
    mo.md(r"""### Table""")
    return


@app.function
def best_result(value, field, best_value):
    if value[field] == None:
        return False
    if best_value == None:
        return True
    if best_value[field]["avg"] < value[field]["avg"]:
        return True
    return False


@app.cell
def _(
    displayed_stat,
    is_zero,
    reported_templates,
    resp_by_template_ldp,
    resp_by_template_si,
    resp_by_template_ti,
):
    template  = ""
    with open("./templates/dief_table_continuous_performance.tex", "r") as template_file:
        template = template_file.read()

    for q in reported_templates:
        summaries = [resp_by_template_si[q], resp_by_template_ti[q], resp_by_template_ldp[q]]
        best_d_0_1 = None
        best_d_1 = None
        best_d_10 = None

        all_zero_d_0_1 = True
        all_zero_d_1 = True
        all_zero_d_10 = True

        for summary in summaries:
            all_zero_d_0_1 = all_zero_d_0_1 and is_zero(summary["dief@0.1s"])
            all_zero_d_1 = all_zero_d_1 and is_zero(summary["dief@1s"])
            all_zero_d_10 = all_zero_d_10 and is_zero(summary["dief@10s"])

            if best_result(summary, "dief@0.1s", best_d_0_1):
                best_d_0_1 = summary

            if best_result(summary, "dief@1s", best_d_1):
                best_d_1 = summary 

            if best_result(summary,"dief@10s", best_d_10):
                best_d_10 = summary

        for summary in summaries:
            ft = None
            tt = None 
            wt = None 

            if best_d_0_1 == summary and not all_zero_d_0_1:
                ft = displayed_stat(summary["dief@0.1s"], True)
            else:
                ft = displayed_stat(summary["dief@0.1s"], False)

            if best_d_1 == summary and not all_zero_d_1:
                tt = displayed_stat(summary["dief@1s"], True)
            else:
                tt = displayed_stat(summary["dief@1s"], False)

            if best_d_10 == summary and not all_zero_d_10:    
                wt = displayed_stat(summary["dief@10s"], True)
            else:
                wt = displayed_stat(summary["dief@10s"], False)

            template = template.replace("{}", ft, 1)
            template = template.replace("{}", tt, 1)
            template = template.replace("{}", wt, 1)
    return (template,)


@app.cell
def _(artefact_path, template):
    with open(artefact_path / "dief_table_continuous_performance.tex", "w") as table_file:
        table_file.write(template)
    return


@app.cell
def _(mo):
    mo.md(r"""### Plot""")
    return


@app.cell
def _():
    y_label = "result-time (n x ms)"
    return (y_label,)


@app.cell
def _(
    artefact_path,
    plot,
    reported_templates,
    resp_by_template_si,
    resp_by_template_ti,
    shapeIndexDataset,
    typeIndexLdpDataset,
    y_label,
):
    fig_dief_01 = plot("dief@0.1s", resp_by_template_si, resp_by_template_ti, shapeIndexDataset, typeIndexLdpDataset, reported_templates, y_label=y_label)

    fig_dief_01.savefig(artefact_path / "dief_01.svg", format="svg")
    fig_dief_01.savefig(artefact_path / "dief_01.eps", format="eps")

    fig_dief_01
    return


@app.cell
def _(
    artefact_path,
    plot,
    reported_templates,
    resp_by_template_si,
    resp_by_template_ti,
    shapeIndexDataset,
    typeIndexLdpDataset,
    y_label,
):
    fig_dief_1 = plot("dief@1s", resp_by_template_si, resp_by_template_ti, shapeIndexDataset, typeIndexLdpDataset, reported_templates, y_label=y_label)

    fig_dief_1.savefig(artefact_path / "dief_1.svg", format="svg")
    fig_dief_1.savefig(artefact_path / "dief_1.eps", format="eps")

    fig_dief_1
    return


@app.cell
def _(
    artefact_path,
    plot,
    reported_templates,
    resp_by_template_si,
    resp_by_template_ti,
    shapeIndexDataset,
    typeIndexLdpDataset,
    y_label,
):
    fig_dief_10 = plot("dief@10s", resp_by_template_si, resp_by_template_ti, shapeIndexDataset, typeIndexLdpDataset, reported_templates, y_label=y_label)

    fig_dief_10.savefig(artefact_path / "dief_10.svg", format="svg")
    fig_dief_10.savefig(artefact_path / "dief_10.eps", format="eps")

    fig_dief_10
    return


@app.cell
def _():
    return


if __name__ == "__main__":
    app.run()
